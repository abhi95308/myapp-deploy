services:
  web:
    build: ./web
    restart: always
    environment:
      NODE_ENV: ${NODE_ENV}
      APP_BASE_URL: ${APP_BASE_URL}
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      - postgres
    networks:
      - default
      - dokploy-network
    labels:
      - traefik.enable=true
      - traefik.docker.network=dokploy-network
      - traefik.http.routers.myapp-web.rule=Host(`prod.54.206.49.116.nip.io`)
      - traefik.http.routers.myapp-web.entrypoints=web
      - traefik.http.routers.myapp-web.middlewares=myapp-redirecthttps@docker
      - traefik.http.routers.myapp-web.service=myapp-svc
      - traefik.http.routers.myapp-websecure.rule=Host(`prod.54.206.49.116.nip.io`)
      - traefik.http.routers.myapp-websecure.entrypoints=websecure
      - traefik.http.routers.myapp-websecure.tls.certresolver=letsencrypt
      - traefik.http.routers.myapp-websecure.service=myapp-svc
      - traefik.http.services.myapp-svc.loadbalancer.server.port=5000
      - traefik.http.middlewares.myapp-redirecthttps.redirectscheme.scheme=https
      - traefik.http.middlewares.myapp-redirecthttps.redirectscheme.permanent=true

  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - default

volumes:
  pg_data:

networks:
  dokploy-network:
    external: true
